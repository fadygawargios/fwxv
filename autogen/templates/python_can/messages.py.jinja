import struct

# Board and Message ids
{% for board in boards -%}
SYSTEM_CAN_DEVICE_{{ board | upper }} = {{ loop.index0 }}
{% endfor %}
NUM_SYSTEM_CAN_DEVICES = {{ boards | length }}

{% for message in messages -%}
SYSTEM_CAN_MESSAGE_{{ message.sender | upper }}_{{ message.name | upper }} = {{ message.id * 32 + boards.index(message.sender) }} # ({{ message.id }} << 5) + SYSTEM_CAN_DEVICE_{{ message.sender | upper }}
{% endfor %}

def pack(num, size):
    if isinstance(num, float) and (size == 32):
        return struct.pack("f", num).hex()
    elif (size == 32):
        return struct.pack("i", num).hex()
    elif (size == 16):
        return struct.pack("h", num).hex()
    elif (size == 8):
        return struct.pack("b", num).hex()

{% for message in messages %}
def {{ message.sender }}_{{ message.name }}(
    {%- for signal in message.signals -%}
        {{- signal.name -}}{{- ", " if not loop.last -}}
    {%- endfor -%}
):
    data = 
    {%- for signal in message.signals -%}
        pack({{ signal.name }}, {{ signal.length }})
        {{- (' + ' if loop.index % 2 else ' + \\\n\t\t') if not loop.last }}
    {%- endfor %}
    return f"{SYSTEM_CAN_MESSAGE_{{ message.sender | upper }}_{{ message.name | upper }}:3>x}#{data}"
{% endfor %}
