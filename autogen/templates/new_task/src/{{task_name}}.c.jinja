#include "log.h"
#include "tasks.h"
#include "{{ task_name }}.h"

static SemaphoreHandle_t s_{{ task_name }}_sem_handle;
static StaticSemaphore_t s_{{ task_name }}_sem;

void run_{{ task_name }}_cycle() {
    BaseType_t ret = xSemaphoreGive(s_{{ task_name }}_sem_handle);

    if (ret == pdFALSE) {
        return STATUS_CODE_INTERNAL_ERROR;
    }

    return STATUS_CODE_OK;
}

TASK({{ task_name }}, TASK_MIN_STACK_SIZE) {
    int counter = 0;
    while (true)
    {
        xSemaphoreTake(s_{{ task_name }}_sem_handle, portMAX_DELAY);
        counter++;
        run_{{ task_name }}_fast_cycle();
        if ((counter % 10) == 0)
            run_{{ task_name }}_medium_cycle();
        if ((counter % 100) == 0)
            run_{{ task_name }}_slow_cycle();
        send_task_end();
    }
}

void run_{{ task_name }}_fast_cycle() {}

void run_{{ task_name }}_medium_cycle() {}

void run_{{ task_name }}_slow_cycle() {}

StatusCode init_{{ task_name }}() {
    status_ok_or_return(tasks_init_task({{ task_name }}, TASK_PRIORITY(2), NULL));
    return STATUS_CODE_OK;
}
